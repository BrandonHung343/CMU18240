===============================================================================
Module : myAbstractFSM
===============================================================================
SCORE  LINE   FSM    
 88.10 100.00  76.19 

Source File(s) : 

/afs/ece.cmu.edu/usr/bhung/Private/18240-Lab-4/abstract/abstractFSM.sv

Module self-instances :

SCORE  LINE   FSM    NAME            
 88.10 100.00  76.19 myAFSM_test.dut 



-------------------------------------------------------------------------------
Line Coverage for Module : myAbstractFSM

             Line No.   Total   Covered  Percent
TOTAL                       53       53   100.00
ALWAYS             18       34       34   100.00
ALWAYS             72       16       16   100.00
ALWAYS            104        3        3   100.00

17                        always_comb begin
18         1/1              case (currState)
19                            init: begin
20         1/1                        if (coin == 2'b00)
21         1/1                          nextState = init;
22         1/1                        else if (coin == 2'b01)
23         1/1                          nextState = cred1;
24         1/1                        else if (coin == 2'b10)
25         1/1                          nextState = cred3;
26                                    else
27         1/1                          nextState <= cred1Soda;
28                                   end
29                         cred1: begin
30         1/1                      if (coin == 2'b00)
31         1/1                        nextState = cred1;
32         1/1                      else if (coin == 2'b01)
33         1/1                        nextState = cred2;
34         1/1                      else if (coin == 2'b10)
35         1/1                        nextState = cred0Soda;
36                                  else
37         1/1                        nextState = cred2Soda;
38                                end
39                      
40                         cred2: begin
41         1/1                      if (coin == 2'b00)
42         1/1                        nextState = cred2;
43         1/1                      else if (coin == 2'b01)
44         1/1                        nextState = cred3;
45         1/1                      else if (coin == 2'b10)
46         1/1                        nextState = cred1Soda;
47                                  else
48         1/1                        nextState = cred3Soda;
49                                end
50                      
51                         cred3: begin
52         1/1                      if (coin == 2'b00)
53         1/1                        nextState = cred3;
54         1/1                      else if (coin == 2'b01)
55         1/1                        nextState = cred0Soda;
56         1/1                      else if (coin == 2'b10)
57         1/1                        nextState = cred2Soda;
58                                  else 
59         1/1                        nextState = cred0Soda;
60                                end
61                      
62         1/1             cred0Soda: nextState = init;
63         1/1             cred1Soda: nextState = cred1;
64         1/1             cred2Soda: nextState = cred2;
65         1/1             cred3Soda: nextState = cred3;
66         1/1             default: nextState = init;
67                         endcase
68                        end
69                      
70                      
71                        always_comb begin
72         1/1              drop = 0; 
73         1/1              credit = 4'b0000;
74         1/1              unique case (currState)
75         1/1             init: credit = 4'b0000;
76         1/1                cred1: credit = 4'b0001;
77         1/1             cred2: credit = 4'b0010;
78         1/1             cred3: credit = 4'b0011;
79         1/1             cred0Soda: drop = 1;
80                         cred1Soda: begin
81         1/1                          drop = 1;
82         1/1                          credit = 4'b0001;
83                                    end
84                         cred2Soda: begin
85         1/1                          drop = 1;
86         1/1                          credit = 4'b0010;
87                                    end
88                         cred3Soda: begin
89         1/1                          drop = 1;
90         1/1          								credit = 4'b0011;
91                      						 end
92                      	 default: begin
93         1/1          	            drop = 0;
94         1/1          					credit = 4'b0000;
95                      				 end
96                          endcase
97                        end
98                      
99                      // Synchronous state update described here as an always block.
100                     // In essence, these are your flip flops that will hold the state
101                     // This doesn't do anything interesting except to capture the new
102                     // state value on each clock edge. Also, synchronous reset.
103                       always_ff @(posedge clock)
104        1/1            if (~reset_N)
105        1/1              currState <= init; // or whatever the reset state is
106                       else
107        1/1              currState <= nextState;

-------------------------------------------------------------------------------
FSM Coverage for Module : myAbstractFSM
Summary for FSM :: currState
            Total Covered Percent 
States      8     8       100.00  
Transitions 21    16      76.19   
Sequences   0     0               

State, Transition and Sequence Details for FSM :: currState
-------------------------------------------------------------------------------
states    Covered 
init      Covered 
cred1     Covered 
cred2     Covered 
cred3     Covered 
cred0Soda Covered 
cred1Soda Covered 
cred2Soda Covered 
cred3Soda Covered 

transitions      Covered     
init->cred1      Covered     
init->cred3      Covered     
init->cred1Soda  Covered     
cred1->init      Not Covered 
cred1->cred2     Covered     
cred1->cred0Soda Covered     
cred1->cred2Soda Covered     
cred2->init      Not Covered 
cred2->cred3     Covered     
cred2->cred1Soda Covered     
cred2->cred3Soda Covered     
cred3->init      Covered     
cred3->cred0Soda Covered     
cred3->cred2Soda Covered     
cred0Soda->init  Covered     
cred1Soda->init  Not Covered 
cred1Soda->cred1 Covered     
cred2Soda->init  Not Covered 
cred2Soda->cred2 Covered     
cred3Soda->init  Not Covered 
cred3Soda->cred3 Covered     

sequences Covered 


-------------------------------------------------------------------------------
===============================================================================
Module Instance : myAFSM_test.dut
===============================================================================

Instance :

SCORE  LINE   FSM    
 88.10 100.00  76.19 


Instance's subtree :

SCORE  LINE   FSM    
 88.10 100.00  76.19 


Module : 

SCORE  LINE   FSM    NAME          
 88.10 100.00  76.19 myAbstractFSM 


Parent : 

SCORE  LINE   FSM    NAME        
100.00 100.00 --     myAFSM_test 


Subtrees :


no children
----------------


-------------------------------------------------------------------------------
Since this is the module's only instance, the coverage report is the same as for the module.
===============================================================================
Module : myAFSM_test
===============================================================================
SCORE  LINE   FSM    
100.00 100.00 --     

Source File(s) : 

/afs/ece.cmu.edu/usr/bhung/Private/18240-Lab-4/abstractFSMtest.sv

Module self-instances :

SCORE  LINE   FSM    NAME        
100.00 100.00 --     myAFSM_test 



-------------------------------------------------------------------------------
Line Coverage for Module : myAFSM_test

             Line No.   Total   Covered  Percent
TOTAL                       87       87   100.00
INITIAL             7        5        5   100.00
INITIAL            15       82       82   100.00

6                         initial begin
7          1/1              $monitor($time,, "state=%s, coin=%d, credit=%d, drop=%b",
8                                   dut.currState.name, coin, credit, drop);
9          1/1              clock = 0;
10         3/3              forever #5 clock = ~clock;
11                        end
12                        
13                        initial begin
14                        // initialize values
15         2/2              coin <= 2'b00; reset_N <= 0;
16                        // reset is synchronous, so must wait for a clock edge
17         2/2              @(posedge clock); 
18         2/2              @(posedge clock); 
19                        // One edge is enough, but what the heck
20         2/2              @(posedge clock);
21                        // release reset and start the vector 01 10 00 11
22         1/1              reset_N <= 1; // changes "after" the clock edge
23         1/1              coin <= 2'b01;
24         2/2              @(posedge clock); // 1 credit
25         2/2              @(posedge clock); // 2 credit
26         2/2              @(posedge clock); // 3 credit
27         2/2              @(posedge clock); // 0 credit Soda
28         2/2              @(posedge clock); // 0 init
29         2/2              @(posedge clock); // 1 credit
30         2/2              @(posedge clock); // 2 credit
31         1/1              coin <= 2'b10;
32         2/2              @(posedge clock); // 1 cred Soda
33         2/2              @(posedge clock); // 1 cred 
34         1/1              coin <= 2'b11;
35         2/2              @(posedge clock); // 2 cred Soda
36         2/2              @(posedge clock); // 2 cred
37         1/1              coin <= 2'b11;
38         2/2              @(posedge clock); // 3 cred Soda
39         2/2              @(posedge clock); // 3 cred
40         1/1              coin <= 2'b11;
41         2/2              @(posedge clock); // 0 cred Soda
42         2/2              @(posedge clock); // 0 cred
43         1/1              coin = 2'b10;
44         2/2              @(posedge clock); // 3 cred
45         1/1              coin = 2'b10;
46         2/2              @(posedge clock); // 2 cred Soda
47         2/2              @(posedge clock); // 2 cred
48                          // begin cycle 2
49         1/1              coin <= 2'b00;
50         2/2              @(posedge clock); // 2 cred
51         1/1              coin <= 2'b01;
52         2/2              @(posedge clock); // 3 cred
53         1/1              coin <= 2'b00;
54         2/2              @(posedge clock); // 3 cred
55         1/1              reset_N <= 0;
56         2/2              @(posedge clock); // init
57         1/1              reset_N <= 1;
58         2/2              @(posedge clock); // init
59         1/1              coin <= 2'b11;
60         2/2              @(posedge clock); // 1 cred Soda
61         2/2              @(posedge clock); // 1 cred
62         1/1              coin <= 2'b00;
63         2/2              @(posedge clock); // 1 cred
64         2/2              @(posedge clock);
65         1/1              coin <= 2'b10;
66         2/2              @(posedge clock);
67                          
68         2/2              #1 $finish;

-------------------------------------------------------------------------------
===============================================================================
Module Instance : myAFSM_test
===============================================================================

Instance :

SCORE  LINE   FSM    
100.00 100.00 --     


Instance's subtree :

SCORE  LINE   FSM    
 88.10 100.00  76.19 


Module : 

SCORE  LINE   FSM    NAME        
100.00 100.00 --     myAFSM_test 


Parent : 

none
----------------


Subtrees :

SCORE  LINE   FSM    NAME 
 88.10 100.00  76.19 dut  



-------------------------------------------------------------------------------
Since this is the module's only instance, the coverage report is the same as for the module.
